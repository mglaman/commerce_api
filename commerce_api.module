<?php

/**
 * @file
 * Provides hooks.
 */

use Drupal\commerce_api\Plugin\Field\ComputedOrderTotalFieldItemList;
use Drupal\commerce_api\Plugin\Field\ComputedResolvedPrice;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Session\AccountInterface;

/**
 * Implements hook_entity_field_access().
 */
function commerce_api_entity_field_access($operation, FieldDefinitionInterface $field_definition, AccountInterface $account, FieldItemListInterface $items = NULL) {
  $field_access = \Drupal::getContainer()->get('commerce_api.field_access');
  return $field_access->handle($operation, $field_definition, $account, $items);
}

/**
 * Implements hook_entity_base_field_info_alter().
 */
function commerce_api_entity_base_field_info_alter(&$fields, EntityTypeInterface $entity_type) {
  /** @var \Drupal\Core\Field\BaseFieldDefinition[] $fields */
  if (isset($fields['coupons']) && ($entity_type->id() === 'commerce_order')) {
    // @see https://www.drupal.org/node/3041856
    $fields['coupons']->addConstraint('CouponValid');
  }
  if ($entity_type->id() === 'commerce_order_item') {
    // @see https://www.drupal.org/node/3088597
    $fields['purchased_entity']->addConstraint('PurchasedEntityAvailable');
    // Drupal core doesn't properly add `min` constraints when the minimum value
    // is zero.
    // @todo remove after https://www.drupal.org/project/drupal/issues/3090629.
    $fields['quantity']->getItemDefinition()->addConstraint('ComplexData', [
      'value' => [
        'Range' => [
          'min' => 0,
          'minMessage' => t('%name: the value may be no less than %min.', ['%name' => $fields['quantity']->getLabel(), '%min' => 0]),
        ],
      ],
    ]);
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function commerce_api_entity_base_field_info(EntityTypeInterface $entity_type) {
  if ($entity_type->id() === 'commerce_order') {
    // @todo needs a test.
    $fields['order_total'] = BaseFieldDefinition::create('map')
      ->setLabel(t('Order total'))
      ->setReadOnly(TRUE)
      ->setComputed(TRUE)
      ->setClass(ComputedOrderTotalFieldItemList::class);
    return $fields;
  }
  if ($entity_type->id() === 'commerce_product_variation') {
    // @todo needs a test.
    $fields['resolved_price'] = BaseFieldDefinition::create('commerce_price')
      ->setLabel(t('Resolved price'))
      ->setReadOnly(TRUE)
      ->setComputed(TRUE)
      ->setSetting('source_field', 'price')
      ->setClass(ComputedResolvedPrice::class);
    return $fields;
  }
}
